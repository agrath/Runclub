/**
 * Stand alone polyfill allow only numbers on input of type number.
 *
 * While input filtering is already supported by default by some browsers, maximum length has not been implemented by
 * any. This script will solve both issue and make sure that only digits can be entered in input elements of type
 * number. If the optional attribute `max` is set, it will calculate it's length and mimic the `maxlength` behavior on
 * input of type text.
 *
 * Supports:
 *
 *  - Browsers: IE8+ and any other browsers.
 *
 * Limitations:
 *
 * - Must use an addEventListener polyfill (e.g. https://github.com/nbouvrette/eventListenerPolyfill) for IE8 support.
 * - Must use HTML5shiv (https://github.com/afarkas/html5shiv) for IE8 support.
 *
 * Usage:
 *
 * <input type="number" id="number" min="0" max="100">
 * <script>
 *     var number = document.getElementById("number");
 *     inputTypeNumberPolyfill.polyfillElement(number);
 * </script>
 */
window.inputTypeNumberPolyfill = {

    /**
     * Does the clipboard contain a numerical value?
     *
     * @private
     *
     * @param {Event} event - The paste event triggering this method.
     */
    clipboardIsNumeric: function (event) {
        event = (event) ? event : window.event;
        var clipboardData = (event.clipboardData) ? event.clipboardData.getData('Text') : window.clipboardData.getData('Text');
        var isNumber = /^\d+$/.test(clipboardData);
        return (isNumber);
    },

    /**
     * Is the clipboard data bigger than the element's maximum length?
     *
     * @private
     *
     * @param {Event} event - The paste event triggering this method.
     * @param {HTMLElement|HTMLInputElement} element - The HTML element.
     */
    eventIsBlockedByMaxWhenPasting: function (event, element) {
        var maximumValueLength = this.getMaxValueLength(element);
        if (maximumValueLength) {
            event = (event) ? event : window.event;
            var clipboardData = (event.clipboardData) ? event.clipboardData.getData('Text') : window.clipboardData.getData('Text');
            var clipboardDataLength = (typeof clipboardData == 'undefined') ? 0 : clipboardData.length;
            var selectedTextLength = this.getSelectedTextLength(event, element);
            return ((element.value.length + clipboardDataLength - selectedTextLength) > maximumValueLength);
        }
        return false;
    },

    /**
     * Get the selected text length.
     *
     * @private
     *
     * There are multiple bugs linked to selection in all major current browsers. This method works around the
     * documented problems mentioned below:
     *
     * - Chrome: http://stackoverflow.com/questions/21177489/selectionstart-selectionend-on-input-type-number-no-longer-allowed-in-chrome
     * - Firefox: https://bugzilla.mozilla.org/show_bug.cgi?id=85686
     *
     * @param {Event|KeyboardEvent} event - The event triggering this method.
     * @param {HTMLElement|HTMLInputElement} element - The HTML element.
     *
     * @returns {Number} Returns the selected text length or 0 when unable to get it.
     */
    getSelectedTextLength: function (event, element) {
        var selectionLength = 0;

        try {
            // Used by Firefox and modern IE (using a Chrome workaround).
            selectionLength = (element.selectionEnd - element.selectionStart);
            selectionLength = (typeof selectionLength == 'number' && !isNaN(selectionLength)) ? selectionLength : 0;
        } catch (error) {
        }

        if (!selectionLength) {
            if (window.getSelection) {
                // Used by Chrome.
                var selection = window.getSelection();
                selectionLength = (selection == 'undefined') ? 0 : selection.toString().length;
            } else if (document.selection && document.selection.type != 'None') {
                // Used IE8.
                var textRange = document.selection.createRange();
                selectionLength = textRange.text.length;
            }
        }

        return selectionLength;
    },

    /**
     * Is the next typed character blocked by element's maximum length?
     *
     * @private
     *
     * @param {KeyboardEvent} event - The Keyboard event triggering this method.
     * @param {HTMLElement|HTMLInputElement} element - The HTML element.
     */
    eventIsBlockedByMaxWhenTyping: function (event, element) {
        var maximumValueLength = this.getMaxValueLength(element);
        if (maximumValueLength) {
            event = (event) ? event : window.event;
            var selectedTextLength = this.getSelectedTextLength(event, element);
            var characterLength = this.getCharCodeLength(event);
            return ((element.value.length - selectedTextLength + characterLength) > maximumValueLength);
        }
        return false;
    },

    /**
     * Does the element have a max attribute set? And if it is valid, what is its length.
     *
     * @private
     *
     * @param {HTMLElement|HTMLInputElement} element - The HTML element.
     */
    getMaxValueLength: function (element) {
        var maximumValue = element.getAttribute('max');
        if (!maximumValue || !/^\d+$/.test(maximumValue)) {
            return 0;
        } else {
            return maximumValue.length;
        }
    },

    /**
     * Is the event's character a digit?
     *
     * @private
     *
     * @param {KeyboardEvent} event - The Keyboard event triggering this method.
     */
    eventKeyIsDigit: function (event) {
        event = (event) ? event : window.event;
        var keyCode = (event.which) ? event.which : event.keyCode;
        return (this.codeIsADigit(keyCode) || this.charCodeIsAllowed(event));
    },

    /**
     * Is a given keyboard event code (charCode or keyCode) a digit?
     *
     * @private
     *
     * @param {Number|Object} code - The Keyboard event key code.
     */
    codeIsADigit: function (code) {
        var stringCode = String.fromCharCode(code);
        return /^\d$/.test(stringCode);
    },

    /**
     * Is the charCode of this event allowed?
     *
     * @private
     *
     * Some browsers already filter keys for input of type number which means some `onkeypress` event will never get
     * triggered. For other browsers (e.g. Firefox) we need to filter which keys are pressed to only allow digits and
     * any other non typeable keys. There are 3 types of keys we want to let go through:
     *
     * - Digits.
     * - Non typeable characters (moving arrows, backspace, del, tab, etc.).
     * - Key combinations (alt, ctrl, shift, etc) - used for copy paste and other functionalities.
     *
     * @param {KeyboardEvent} event - The Keyboard event triggering this method.
     */
    charCodeIsAllowed: function (event) {
        event = (event) ? event : window.event;
        var charCode = event.charCode;
        var keyCode = (event.which) ? event.which : event.keyCode;
        charCode = (typeof charCode === 'undefined') ? keyCode : charCode; // IE8 fallback.

        if (charCode === 0) {
            // Non typeable characters are allowed.
            return true;
        } else if (event.altKey || event.ctrlKey || event.shiftKey || event.metaKey) {
            // All combinations are allowed.
            return true
        } else if (!this.codeIsADigit(charCode)) {
            // Any other character that is not a digit will be blocked.
            return false;
        }

        // The only characters left are numeric, so we let them through.
        return true;
    },

    /**
     * Get the character code length.
     *
     * @private
     *
     * @param {KeyboardEvent} event - The Keyboard event triggering this method.
     */
    getCharCodeLength: function (event) {
        event = (event) ? event : window.event;
        var charCode = event.charCode;
        var keyCode = (event.which) ? event.which : event.keyCode;
        charCode = (typeof charCode === 'undefined') ? keyCode : charCode; // IE8 fallback.

        if (charCode === 0) {
            // Non typeable characters have no length.
            return 0;
        } else if (event.altKey || event.ctrlKey || event.shiftKey || event.metaKey) {
            // All combinations have no length.
            return 0
        } else if (!this.codeIsADigit(charCode)) {
            // All non-allowed characters have 0 length (because they will be blocked).
            return 0;
        }

        return 1; // By default a character has a length of 1.
    },

    /**
     * Polyfill a given element.
     *
     * @param {HTMLElement|HTMLInputElement} element - The HTML element.
     */
    polyfillElement: function (element) {

        element.addEventListener('keypress', function (event) {
            if (!inputTypeNumberPolyfill.eventKeyIsDigit(event) ||
                inputTypeNumberPolyfill.eventIsBlockedByMaxWhenTyping(event, element)) {
                event.preventDefault();
            }
        });

        element.addEventListener('paste', function (event) {
            if (!inputTypeNumberPolyfill.clipboardIsNumeric(event) ||
                inputTypeNumberPolyfill.eventIsBlockedByMaxWhenPasting(event, element)) {
                event.preventDefault();
            }
        });

    }
};
//! moment.js
//! version : 2.6.0
//! authors : Tim Wood, Iskren Chernev, Moment.js contributors
//! license : MIT
//! momentjs.com
(function (a) { function b() { return { empty: !1, unusedTokens: [], unusedInput: [], overflow: -2, charsLeftOver: 0, nullInput: !1, invalidMonth: null, invalidFormat: !1, userInvalidated: !1, iso: !1 } } function c(a, b) { function c() { ib.suppressDeprecationWarnings === !1 && "undefined" != typeof console && console.warn && console.warn("Deprecation warning: " + a) } var d = !0; return i(function () { return d && (c(), d = !1), b.apply(this, arguments) }, b) } function d(a, b) { return function (c) { return l(a.call(this, c), b) } } function e(a, b) { return function (c) { return this.lang().ordinal(a.call(this, c), b) } } function f() { } function g(a) { y(a), i(this, a) } function h(a) { var b = r(a), c = b.year || 0, d = b.quarter || 0, e = b.month || 0, f = b.week || 0, g = b.day || 0, h = b.hour || 0, i = b.minute || 0, j = b.second || 0, k = b.millisecond || 0; this._milliseconds = +k + 1e3 * j + 6e4 * i + 36e5 * h, this._days = +g + 7 * f, this._months = +e + 3 * d + 12 * c, this._data = {}, this._bubble() } function i(a, b) { for (var c in b) b.hasOwnProperty(c) && (a[c] = b[c]); return b.hasOwnProperty("toString") && (a.toString = b.toString), b.hasOwnProperty("valueOf") && (a.valueOf = b.valueOf), a } function j(a) { var b, c = {}; for (b in a) a.hasOwnProperty(b) && wb.hasOwnProperty(b) && (c[b] = a[b]); return c } function k(a) { return 0 > a ? Math.ceil(a) : Math.floor(a) } function l(a, b, c) { for (var d = "" + Math.abs(a), e = a >= 0; d.length < b;)d = "0" + d; return (e ? c ? "+" : "" : "-") + d } function m(a, b, c, d) { var e = b._milliseconds, f = b._days, g = b._months; d = null == d ? !0 : d, e && a._d.setTime(+a._d + e * c), f && db(a, "Date", cb(a, "Date") + f * c), g && bb(a, cb(a, "Month") + g * c), d && ib.updateOffset(a, f || g) } function n(a) { return "[object Array]" === Object.prototype.toString.call(a) } function o(a) { return "[object Date]" === Object.prototype.toString.call(a) || a instanceof Date } function p(a, b, c) { var d, e = Math.min(a.length, b.length), f = Math.abs(a.length - b.length), g = 0; for (d = 0; e > d; d++)(c && a[d] !== b[d] || !c && t(a[d]) !== t(b[d])) && g++; return g + f } function q(a) { if (a) { var b = a.toLowerCase().replace(/(.)s$/, "$1"); a = Zb[a] || $b[b] || b } return a } function r(a) { var b, c, d = {}; for (c in a) a.hasOwnProperty(c) && (b = q(c), b && (d[b] = a[c])); return d } function s(b) { var c, d; if (0 === b.indexOf("week")) c = 7, d = "day"; else { if (0 !== b.indexOf("month")) return; c = 12, d = "month" } ib[b] = function (e, f) { var g, h, i = ib.fn._lang[b], j = []; if ("number" == typeof e && (f = e, e = a), h = function (a) { var b = ib().utc().set(d, a); return i.call(ib.fn._lang, b, e || "") }, null != f) return h(f); for (g = 0; c > g; g++)j.push(h(g)); return j } } function t(a) { var b = +a, c = 0; return 0 !== b && isFinite(b) && (c = b >= 0 ? Math.floor(b) : Math.ceil(b)), c } function u(a, b) { return new Date(Date.UTC(a, b + 1, 0)).getUTCDate() } function v(a, b, c) { return $(ib([a, 11, 31 + b - c]), b, c).week } function w(a) { return x(a) ? 366 : 365 } function x(a) { return a % 4 === 0 && a % 100 !== 0 || a % 400 === 0 } function y(a) { var b; a._a && -2 === a._pf.overflow && (b = a._a[pb] < 0 || a._a[pb] > 11 ? pb : a._a[qb] < 1 || a._a[qb] > u(a._a[ob], a._a[pb]) ? qb : a._a[rb] < 0 || a._a[rb] > 23 ? rb : a._a[sb] < 0 || a._a[sb] > 59 ? sb : a._a[tb] < 0 || a._a[tb] > 59 ? tb : a._a[ub] < 0 || a._a[ub] > 999 ? ub : -1, a._pf._overflowDayOfYear && (ob > b || b > qb) && (b = qb), a._pf.overflow = b) } function z(a) { return null == a._isValid && (a._isValid = !isNaN(a._d.getTime()) && a._pf.overflow < 0 && !a._pf.empty && !a._pf.invalidMonth && !a._pf.nullInput && !a._pf.invalidFormat && !a._pf.userInvalidated, a._strict && (a._isValid = a._isValid && 0 === a._pf.charsLeftOver && 0 === a._pf.unusedTokens.length)), a._isValid } function A(a) { return a ? a.toLowerCase().replace("_", "-") : a } function B(a, b) { return b._isUTC ? ib(a).zone(b._offset || 0) : ib(a).local() } function C(a, b) { return b.abbr = a, vb[a] || (vb[a] = new f), vb[a].set(b), vb[a] } function D(a) { delete vb[a] } function E(a) { var b, c, d, e, f = 0, g = function (a) { if (!vb[a] && xb) try { require("./lang/" + a) } catch (b) { } return vb[a] }; if (!a) return ib.fn._lang; if (!n(a)) { if (c = g(a)) return c; a = [a] } for (; f < a.length;) { for (e = A(a[f]).split("-"), b = e.length, d = A(a[f + 1]), d = d ? d.split("-") : null; b > 0;) { if (c = g(e.slice(0, b).join("-"))) return c; if (d && d.length >= b && p(e, d, !0) >= b - 1) break; b-- } f++ } return ib.fn._lang } function F(a) { return a.match(/\[[\s\S]/) ? a.replace(/^\[|\]$/g, "") : a.replace(/\\/g, "") } function G(a) { var b, c, d = a.match(Bb); for (b = 0, c = d.length; c > b; b++)d[b] = cc[d[b]] ? cc[d[b]] : F(d[b]); return function (e) { var f = ""; for (b = 0; c > b; b++)f += d[b] instanceof Function ? d[b].call(e, a) : d[b]; return f } } function H(a, b) { return a.isValid() ? (b = I(b, a.lang()), _b[b] || (_b[b] = G(b)), _b[b](a)) : a.lang().invalidDate() } function I(a, b) { function c(a) { return b.longDateFormat(a) || a } var d = 5; for (Cb.lastIndex = 0; d >= 0 && Cb.test(a);)a = a.replace(Cb, c), Cb.lastIndex = 0, d -= 1; return a } function J(a, b) { var c, d = b._strict; switch (a) { case "Q": return Nb; case "DDDD": return Pb; case "YYYY": case "GGGG": case "gggg": return d ? Qb : Fb; case "Y": case "G": case "g": return Sb; case "YYYYYY": case "YYYYY": case "GGGGG": case "ggggg": return d ? Rb : Gb; case "S": if (d) return Nb; case "SS": if (d) return Ob; case "SSS": if (d) return Pb; case "DDD": return Eb; case "MMM": case "MMMM": case "dd": case "ddd": case "dddd": return Ib; case "a": case "A": return E(b._l)._meridiemParse; case "X": return Lb; case "Z": case "ZZ": return Jb; case "T": return Kb; case "SSSS": return Hb; case "MM": case "DD": case "YY": case "GG": case "gg": case "HH": case "hh": case "mm": case "ss": case "ww": case "WW": return d ? Ob : Db; case "M": case "D": case "d": case "H": case "h": case "m": case "s": case "w": case "W": case "e": case "E": return Db; case "Do": return Mb; default: return c = new RegExp(R(Q(a.replace("\\", "")), "i")) } } function K(a) { a = a || ""; var b = a.match(Jb) || [], c = b[b.length - 1] || [], d = (c + "").match(Xb) || ["-", 0, 0], e = +(60 * d[1]) + t(d[2]); return "+" === d[0] ? -e : e } function L(a, b, c) { var d, e = c._a; switch (a) { case "Q": null != b && (e[pb] = 3 * (t(b) - 1)); break; case "M": case "MM": null != b && (e[pb] = t(b) - 1); break; case "MMM": case "MMMM": d = E(c._l).monthsParse(b), null != d ? e[pb] = d : c._pf.invalidMonth = b; break; case "D": case "DD": null != b && (e[qb] = t(b)); break; case "Do": null != b && (e[qb] = t(parseInt(b, 10))); break; case "DDD": case "DDDD": null != b && (c._dayOfYear = t(b)); break; case "YY": e[ob] = ib.parseTwoDigitYear(b); break; case "YYYY": case "YYYYY": case "YYYYYY": e[ob] = t(b); break; case "a": case "A": c._isPm = E(c._l).isPM(b); break; case "H": case "HH": case "h": case "hh": e[rb] = t(b); break; case "m": case "mm": e[sb] = t(b); break; case "s": case "ss": e[tb] = t(b); break; case "S": case "SS": case "SSS": case "SSSS": e[ub] = t(1e3 * ("0." + b)); break; case "X": c._d = new Date(1e3 * parseFloat(b)); break; case "Z": case "ZZ": c._useUTC = !0, c._tzm = K(b); break; case "w": case "ww": case "W": case "WW": case "d": case "dd": case "ddd": case "dddd": case "e": case "E": a = a.substr(0, 1); case "gg": case "gggg": case "GG": case "GGGG": case "GGGGG": a = a.substr(0, 2), b && (c._w = c._w || {}, c._w[a] = b) } } function M(a) { var b, c, d, e, f, g, h, i, j, k, l = []; if (!a._d) { for (d = O(a), a._w && null == a._a[qb] && null == a._a[pb] && (f = function (b) { var c = parseInt(b, 10); return b ? b.length < 3 ? c > 68 ? 1900 + c : 2e3 + c : c : null == a._a[ob] ? ib().weekYear() : a._a[ob] }, g = a._w, null != g.GG || null != g.W || null != g.E ? h = _(f(g.GG), g.W || 1, g.E, 4, 1) : (i = E(a._l), j = null != g.d ? X(g.d, i) : null != g.e ? parseInt(g.e, 10) + i._week.dow : 0, k = parseInt(g.w, 10) || 1, null != g.d && j < i._week.dow && k++ , h = _(f(g.gg), k, j, i._week.doy, i._week.dow)), a._a[ob] = h.year, a._dayOfYear = h.dayOfYear), a._dayOfYear && (e = null == a._a[ob] ? d[ob] : a._a[ob], a._dayOfYear > w(e) && (a._pf._overflowDayOfYear = !0), c = W(e, 0, a._dayOfYear), a._a[pb] = c.getUTCMonth(), a._a[qb] = c.getUTCDate()), b = 0; 3 > b && null == a._a[b]; ++b)a._a[b] = l[b] = d[b]; for (; 7 > b; b++)a._a[b] = l[b] = null == a._a[b] ? 2 === b ? 1 : 0 : a._a[b]; l[rb] += t((a._tzm || 0) / 60), l[sb] += t((a._tzm || 0) % 60), a._d = (a._useUTC ? W : V).apply(null, l) } } function N(a) { var b; a._d || (b = r(a._i), a._a = [b.year, b.month, b.day, b.hour, b.minute, b.second, b.millisecond], M(a)) } function O(a) { var b = new Date; return a._useUTC ? [b.getUTCFullYear(), b.getUTCMonth(), b.getUTCDate()] : [b.getFullYear(), b.getMonth(), b.getDate()] } function P(a) { a._a = [], a._pf.empty = !0; var b, c, d, e, f, g = E(a._l), h = "" + a._i, i = h.length, j = 0; for (d = I(a._f, g).match(Bb) || [], b = 0; b < d.length; b++)e = d[b], c = (h.match(J(e, a)) || [])[0], c && (f = h.substr(0, h.indexOf(c)), f.length > 0 && a._pf.unusedInput.push(f), h = h.slice(h.indexOf(c) + c.length), j += c.length), cc[e] ? (c ? a._pf.empty = !1 : a._pf.unusedTokens.push(e), L(e, c, a)) : a._strict && !c && a._pf.unusedTokens.push(e); a._pf.charsLeftOver = i - j, h.length > 0 && a._pf.unusedInput.push(h), a._isPm && a._a[rb] < 12 && (a._a[rb] += 12), a._isPm === !1 && 12 === a._a[rb] && (a._a[rb] = 0), M(a), y(a) } function Q(a) { return a.replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g, function (a, b, c, d, e) { return b || c || d || e }) } function R(a) { return a.replace(/[-\/\\^$*+?.()|[\]{}]/g, "\\$&") } function S(a) { var c, d, e, f, g; if (0 === a._f.length) return a._pf.invalidFormat = !0, void (a._d = new Date(0 / 0)); for (f = 0; f < a._f.length; f++)g = 0, c = i({}, a), c._pf = b(), c._f = a._f[f], P(c), z(c) && (g += c._pf.charsLeftOver, g += 10 * c._pf.unusedTokens.length, c._pf.score = g, (null == e || e > g) && (e = g, d = c)); i(a, d || c) } function T(a) { var b, c, d = a._i, e = Tb.exec(d); if (e) { for (a._pf.iso = !0, b = 0, c = Vb.length; c > b; b++)if (Vb[b][1].exec(d)) { a._f = Vb[b][0] + (e[6] || " "); break } for (b = 0, c = Wb.length; c > b; b++)if (Wb[b][1].exec(d)) { a._f += Wb[b][0]; break } d.match(Jb) && (a._f += "Z"), P(a) } else ib.createFromInputFallback(a) } function U(b) { var c = b._i, d = yb.exec(c); c === a ? b._d = new Date : d ? b._d = new Date(+d[1]) : "string" == typeof c ? T(b) : n(c) ? (b._a = c.slice(0), M(b)) : o(c) ? b._d = new Date(+c) : "object" == typeof c ? N(b) : "number" == typeof c ? b._d = new Date(c) : ib.createFromInputFallback(b) } function V(a, b, c, d, e, f, g) { var h = new Date(a, b, c, d, e, f, g); return 1970 > a && h.setFullYear(a), h } function W(a) { var b = new Date(Date.UTC.apply(null, arguments)); return 1970 > a && b.setUTCFullYear(a), b } function X(a, b) { if ("string" == typeof a) if (isNaN(a)) { if (a = b.weekdaysParse(a), "number" != typeof a) return null } else a = parseInt(a, 10); return a } function Y(a, b, c, d, e) { return e.relativeTime(b || 1, !!c, a, d) } function Z(a, b, c) { var d = nb(Math.abs(a) / 1e3), e = nb(d / 60), f = nb(e / 60), g = nb(f / 24), h = nb(g / 365), i = 45 > d && ["s", d] || 1 === e && ["m"] || 45 > e && ["mm", e] || 1 === f && ["h"] || 22 > f && ["hh", f] || 1 === g && ["d"] || 25 >= g && ["dd", g] || 45 >= g && ["M"] || 345 > g && ["MM", nb(g / 30)] || 1 === h && ["y"] || ["yy", h]; return i[2] = b, i[3] = a > 0, i[4] = c, Y.apply({}, i) } function $(a, b, c) { var d, e = c - b, f = c - a.day(); return f > e && (f -= 7), e - 7 > f && (f += 7), d = ib(a).add("d", f), { week: Math.ceil(d.dayOfYear() / 7), year: d.year() } } function _(a, b, c, d, e) { var f, g, h = W(a, 0, 1).getUTCDay(); return c = null != c ? c : e, f = e - h + (h > d ? 7 : 0) - (e > h ? 7 : 0), g = 7 * (b - 1) + (c - e) + f + 1, { year: g > 0 ? a : a - 1, dayOfYear: g > 0 ? g : w(a - 1) + g } } function ab(b) { var c = b._i, d = b._f; return null === c || d === a && "" === c ? ib.invalid({ nullInput: !0 }) : ("string" == typeof c && (b._i = c = E().preparse(c)), ib.isMoment(c) ? (b = j(c), b._d = new Date(+c._d)) : d ? n(d) ? S(b) : P(b) : U(b), new g(b)) } function bb(a, b) { var c; return "string" == typeof b && (b = a.lang().monthsParse(b), "number" != typeof b) ? a : (c = Math.min(a.date(), u(a.year(), b)), a._d["set" + (a._isUTC ? "UTC" : "") + "Month"](b, c), a) } function cb(a, b) { return a._d["get" + (a._isUTC ? "UTC" : "") + b]() } function db(a, b, c) { return "Month" === b ? bb(a, c) : a._d["set" + (a._isUTC ? "UTC" : "") + b](c) } function eb(a, b) { return function (c) { return null != c ? (db(this, a, c), ib.updateOffset(this, b), this) : cb(this, a) } } function fb(a) { ib.duration.fn[a] = function () { return this._data[a] } } function gb(a, b) { ib.duration.fn["as" + a] = function () { return +this / b } } function hb(a) { "undefined" == typeof ender && (jb = mb.moment, mb.moment = a ? c("Accessing Moment through the global scope is deprecated, and will be removed in an upcoming release.", ib) : ib) } for (var ib, jb, kb, lb = "2.6.0", mb = "undefined" != typeof global ? global : this, nb = Math.round, ob = 0, pb = 1, qb = 2, rb = 3, sb = 4, tb = 5, ub = 6, vb = {}, wb = { _isAMomentObject: null, _i: null, _f: null, _l: null, _strict: null, _isUTC: null, _offset: null, _pf: null, _lang: null }, xb = "undefined" != typeof module && module.exports, yb = /^\/?Date\((\-?\d+)/i, zb = /(\-)?(?:(\d*)\.)?(\d+)\:(\d+)(?:\:(\d+)\.?(\d{3})?)?/, Ab = /^(-)?P(?:(?:([0-9,.]*)Y)?(?:([0-9,.]*)M)?(?:([0-9,.]*)D)?(?:T(?:([0-9,.]*)H)?(?:([0-9,.]*)M)?(?:([0-9,.]*)S)?)?|([0-9,.]*)W)$/, Bb = /(\[[^\[]*\])|(\\)?(Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Q|YYYYYY|YYYYY|YYYY|YY|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|mm?|ss?|S{1,4}|X|zz?|ZZ?|.)/g, Cb = /(\[[^\[]*\])|(\\)?(LT|LL?L?L?|l{1,4})/g, Db = /\d\d?/, Eb = /\d{1,3}/, Fb = /\d{1,4}/, Gb = /[+\-]?\d{1,6}/, Hb = /\d+/, Ib = /[0-9]*['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFFEF]+|[\u0600-\u06FF\/]+(\s*?[\u0600-\u06FF]+){1,2}/i, Jb = /Z|[\+\-]\d\d:?\d\d/gi, Kb = /T/i, Lb = /[\+\-]?\d+(\.\d{1,3})?/, Mb = /\d{1,2}/, Nb = /\d/, Ob = /\d\d/, Pb = /\d{3}/, Qb = /\d{4}/, Rb = /[+-]?\d{6}/, Sb = /[+-]?\d+/, Tb = /^\s*(?:[+-]\d{6}|\d{4})-(?:(\d\d-\d\d)|(W\d\d$)|(W\d\d-\d)|(\d\d\d))((T| )(\d\d(:\d\d(:\d\d(\.\d+)?)?)?)?([\+\-]\d\d(?::?\d\d)?|\s*Z)?)?$/, Ub = "YYYY-MM-DDTHH:mm:ssZ", Vb = [["YYYYYY-MM-DD", /[+-]\d{6}-\d{2}-\d{2}/], ["YYYY-MM-DD", /\d{4}-\d{2}-\d{2}/], ["GGGG-[W]WW-E", /\d{4}-W\d{2}-\d/], ["GGGG-[W]WW", /\d{4}-W\d{2}/], ["YYYY-DDD", /\d{4}-\d{3}/]], Wb = [["HH:mm:ss.SSSS", /(T| )\d\d:\d\d:\d\d\.\d+/], ["HH:mm:ss", /(T| )\d\d:\d\d:\d\d/], ["HH:mm", /(T| )\d\d:\d\d/], ["HH", /(T| )\d\d/]], Xb = /([\+\-]|\d\d)/gi, Yb = ("Date|Hours|Minutes|Seconds|Milliseconds".split("|"), { Milliseconds: 1, Seconds: 1e3, Minutes: 6e4, Hours: 36e5, Days: 864e5, Months: 2592e6, Years: 31536e6 }), Zb = { ms: "millisecond", s: "second", m: "minute", h: "hour", d: "day", D: "date", w: "week", W: "isoWeek", M: "month", Q: "quarter", y: "year", DDD: "dayOfYear", e: "weekday", E: "isoWeekday", gg: "weekYear", GG: "isoWeekYear" }, $b = { dayofyear: "dayOfYear", isoweekday: "isoWeekday", isoweek: "isoWeek", weekyear: "weekYear", isoweekyear: "isoWeekYear" }, _b = {}, ac = "DDD w W M D d".split(" "), bc = "M D H h m s w W".split(" "), cc = { M: function () { return this.month() + 1 }, MMM: function (a) { return this.lang().monthsShort(this, a) }, MMMM: function (a) { return this.lang().months(this, a) }, D: function () { return this.date() }, DDD: function () { return this.dayOfYear() }, d: function () { return this.day() }, dd: function (a) { return this.lang().weekdaysMin(this, a) }, ddd: function (a) { return this.lang().weekdaysShort(this, a) }, dddd: function (a) { return this.lang().weekdays(this, a) }, w: function () { return this.week() }, W: function () { return this.isoWeek() }, YY: function () { return l(this.year() % 100, 2) }, YYYY: function () { return l(this.year(), 4) }, YYYYY: function () { return l(this.year(), 5) }, YYYYYY: function () { var a = this.year(), b = a >= 0 ? "+" : "-"; return b + l(Math.abs(a), 6) }, gg: function () { return l(this.weekYear() % 100, 2) }, gggg: function () { return l(this.weekYear(), 4) }, ggggg: function () { return l(this.weekYear(), 5) }, GG: function () { return l(this.isoWeekYear() % 100, 2) }, GGGG: function () { return l(this.isoWeekYear(), 4) }, GGGGG: function () { return l(this.isoWeekYear(), 5) }, e: function () { return this.weekday() }, E: function () { return this.isoWeekday() }, a: function () { return this.lang().meridiem(this.hours(), this.minutes(), !0) }, A: function () { return this.lang().meridiem(this.hours(), this.minutes(), !1) }, H: function () { return this.hours() }, h: function () { return this.hours() % 12 || 12 }, m: function () { return this.minutes() }, s: function () { return this.seconds() }, S: function () { return t(this.milliseconds() / 100) }, SS: function () { return l(t(this.milliseconds() / 10), 2) }, SSS: function () { return l(this.milliseconds(), 3) }, SSSS: function () { return l(this.milliseconds(), 3) }, Z: function () { var a = -this.zone(), b = "+"; return 0 > a && (a = -a, b = "-"), b + l(t(a / 60), 2) + ":" + l(t(a) % 60, 2) }, ZZ: function () { var a = -this.zone(), b = "+"; return 0 > a && (a = -a, b = "-"), b + l(t(a / 60), 2) + l(t(a) % 60, 2) }, z: function () { return this.zoneAbbr() }, zz: function () { return this.zoneName() }, X: function () { return this.unix() }, Q: function () { return this.quarter() } }, dc = ["months", "monthsShort", "weekdays", "weekdaysShort", "weekdaysMin"]; ac.length;)kb = ac.pop(), cc[kb + "o"] = e(cc[kb], kb); for (; bc.length;)kb = bc.pop(), cc[kb + kb] = d(cc[kb], 2); for (cc.DDDD = d(cc.DDD, 3), i(f.prototype, { set: function (a) { var b, c; for (c in a) b = a[c], "function" == typeof b ? this[c] = b : this["_" + c] = b }, _months: "January_February_March_April_May_June_July_August_September_October_November_December".split("_"), months: function (a) { return this._months[a.month()] }, _monthsShort: "Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"), monthsShort: function (a) { return this._monthsShort[a.month()] }, monthsParse: function (a) { var b, c, d; for (this._monthsParse || (this._monthsParse = []), b = 0; 12 > b; b++)if (this._monthsParse[b] || (c = ib.utc([2e3, b]), d = "^" + this.months(c, "") + "|^" + this.monthsShort(c, ""), this._monthsParse[b] = new RegExp(d.replace(".", ""), "i")), this._monthsParse[b].test(a)) return b }, _weekdays: "Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"), weekdays: function (a) { return this._weekdays[a.day()] }, _weekdaysShort: "Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"), weekdaysShort: function (a) { return this._weekdaysShort[a.day()] }, _weekdaysMin: "Su_Mo_Tu_We_Th_Fr_Sa".split("_"), weekdaysMin: function (a) { return this._weekdaysMin[a.day()] }, weekdaysParse: function (a) { var b, c, d; for (this._weekdaysParse || (this._weekdaysParse = []), b = 0; 7 > b; b++)if (this._weekdaysParse[b] || (c = ib([2e3, 1]).day(b), d = "^" + this.weekdays(c, "") + "|^" + this.weekdaysShort(c, "") + "|^" + this.weekdaysMin(c, ""), this._weekdaysParse[b] = new RegExp(d.replace(".", ""), "i")), this._weekdaysParse[b].test(a)) return b }, _longDateFormat: { LT: "h:mm A", L: "MM/DD/YYYY", LL: "MMMM D YYYY", LLL: "MMMM D YYYY LT", LLLL: "dddd, MMMM D YYYY LT" }, longDateFormat: function (a) { var b = this._longDateFormat[a]; return !b && this._longDateFormat[a.toUpperCase()] && (b = this._longDateFormat[a.toUpperCase()].replace(/MMMM|MM|DD|dddd/g, function (a) { return a.slice(1) }), this._longDateFormat[a] = b), b }, isPM: function (a) { return "p" === (a + "").toLowerCase().charAt(0) }, _meridiemParse: /[ap]\.?m?\.?/i, meridiem: function (a, b, c) { return a > 11 ? c ? "pm" : "PM" : c ? "am" : "AM" }, _calendar: { sameDay: "[Today at] LT", nextDay: "[Tomorrow at] LT", nextWeek: "dddd [at] LT", lastDay: "[Yesterday at] LT", lastWeek: "[Last] dddd [at] LT", sameElse: "L" }, calendar: function (a, b) { var c = this._calendar[a]; return "function" == typeof c ? c.apply(b) : c }, _relativeTime: { future: "in %s", past: "%s ago", s: "a few seconds", m: "a minute", mm: "%d minutes", h: "an hour", hh: "%d hours", d: "a day", dd: "%d days", M: "a month", MM: "%d months", y: "a year", yy: "%d years" }, relativeTime: function (a, b, c, d) { var e = this._relativeTime[c]; return "function" == typeof e ? e(a, b, c, d) : e.replace(/%d/i, a) }, pastFuture: function (a, b) { var c = this._relativeTime[a > 0 ? "future" : "past"]; return "function" == typeof c ? c(b) : c.replace(/%s/i, b) }, ordinal: function (a) { return this._ordinal.replace("%d", a) }, _ordinal: "%d", preparse: function (a) { return a }, postformat: function (a) { return a }, week: function (a) { return $(a, this._week.dow, this._week.doy).week }, _week: { dow: 0, doy: 6 }, _invalidDate: "Invalid date", invalidDate: function () { return this._invalidDate } }), ib = function (c, d, e, f) { var g; return "boolean" == typeof e && (f = e, e = a), g = {}, g._isAMomentObject = !0, g._i = c, g._f = d, g._l = e, g._strict = f, g._isUTC = !1, g._pf = b(), ab(g) }, ib.suppressDeprecationWarnings = !1, ib.createFromInputFallback = c("moment construction falls back to js Date. This is discouraged and will be removed in upcoming major release. Please refer to https://github.com/moment/moment/issues/1407 for more info.", function (a) { a._d = new Date(a._i) }), ib.utc = function (c, d, e, f) { var g; return "boolean" == typeof e && (f = e, e = a), g = {}, g._isAMomentObject = !0, g._useUTC = !0, g._isUTC = !0, g._l = e, g._i = c, g._f = d, g._strict = f, g._pf = b(), ab(g).utc() }, ib.unix = function (a) { return ib(1e3 * a) }, ib.duration = function (a, b) { var c, d, e, f = a, g = null; return ib.isDuration(a) ? f = { ms: a._milliseconds, d: a._days, M: a._months } : "number" == typeof a ? (f = {}, b ? f[b] = a : f.milliseconds = a) : (g = zb.exec(a)) ? (c = "-" === g[1] ? -1 : 1, f = { y: 0, d: t(g[qb]) * c, h: t(g[rb]) * c, m: t(g[sb]) * c, s: t(g[tb]) * c, ms: t(g[ub]) * c }) : (g = Ab.exec(a)) && (c = "-" === g[1] ? -1 : 1, e = function (a) { var b = a && parseFloat(a.replace(",", ".")); return (isNaN(b) ? 0 : b) * c }, f = { y: e(g[2]), M: e(g[3]), d: e(g[4]), h: e(g[5]), m: e(g[6]), s: e(g[7]), w: e(g[8]) }), d = new h(f), ib.isDuration(a) && a.hasOwnProperty("_lang") && (d._lang = a._lang), d }, ib.version = lb, ib.defaultFormat = Ub, ib.momentProperties = wb, ib.updateOffset = function () { }, ib.lang = function (a, b) { var c; return a ? (b ? C(A(a), b) : null === b ? (D(a), a = "en") : vb[a] || E(a), c = ib.duration.fn._lang = ib.fn._lang = E(a), c._abbr) : ib.fn._lang._abbr }, ib.langData = function (a) { return a && a._lang && a._lang._abbr && (a = a._lang._abbr), E(a) }, ib.isMoment = function (a) { return a instanceof g || null != a && a.hasOwnProperty("_isAMomentObject") }, ib.isDuration = function (a) { return a instanceof h }, kb = dc.length - 1; kb >= 0; --kb)s(dc[kb]); ib.normalizeUnits = function (a) { return q(a) }, ib.invalid = function (a) { var b = ib.utc(0 / 0); return null != a ? i(b._pf, a) : b._pf.userInvalidated = !0, b }, ib.parseZone = function () { return ib.apply(null, arguments).parseZone() }, ib.parseTwoDigitYear = function (a) { return t(a) + (t(a) > 68 ? 1900 : 2e3) }, i(ib.fn = g.prototype, { clone: function () { return ib(this) }, valueOf: function () { return +this._d + 6e4 * (this._offset || 0) }, unix: function () { return Math.floor(+this / 1e3) }, toString: function () { return this.clone().lang("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ") }, toDate: function () { return this._offset ? new Date(+this) : this._d }, toISOString: function () { var a = ib(this).utc(); return 0 < a.year() && a.year() <= 9999 ? H(a, "YYYY-MM-DD[T]HH:mm:ss.SSS[Z]") : H(a, "YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]") }, toArray: function () { var a = this; return [a.year(), a.month(), a.date(), a.hours(), a.minutes(), a.seconds(), a.milliseconds()] }, isValid: function () { return z(this) }, isDSTShifted: function () { return this._a ? this.isValid() && p(this._a, (this._isUTC ? ib.utc(this._a) : ib(this._a)).toArray()) > 0 : !1 }, parsingFlags: function () { return i({}, this._pf) }, invalidAt: function () { return this._pf.overflow }, utc: function () { return this.zone(0) }, local: function () { return this.zone(0), this._isUTC = !1, this }, format: function (a) { var b = H(this, a || ib.defaultFormat); return this.lang().postformat(b) }, add: function (a, b) { var c; return c = "string" == typeof a ? ib.duration(+b, a) : ib.duration(a, b), m(this, c, 1), this }, subtract: function (a, b) { var c; return c = "string" == typeof a ? ib.duration(+b, a) : ib.duration(a, b), m(this, c, -1), this }, diff: function (a, b, c) { var d, e, f = B(a, this), g = 6e4 * (this.zone() - f.zone()); return b = q(b), "year" === b || "month" === b ? (d = 432e5 * (this.daysInMonth() + f.daysInMonth()), e = 12 * (this.year() - f.year()) + (this.month() - f.month()), e += (this - ib(this).startOf("month") - (f - ib(f).startOf("month"))) / d, e -= 6e4 * (this.zone() - ib(this).startOf("month").zone() - (f.zone() - ib(f).startOf("month").zone())) / d, "year" === b && (e /= 12)) : (d = this - f, e = "second" === b ? d / 1e3 : "minute" === b ? d / 6e4 : "hour" === b ? d / 36e5 : "day" === b ? (d - g) / 864e5 : "week" === b ? (d - g) / 6048e5 : d), c ? e : k(e) }, from: function (a, b) { return ib.duration(this.diff(a)).lang(this.lang()._abbr).humanize(!b) }, fromNow: function (a) { return this.from(ib(), a) }, calendar: function () { var a = B(ib(), this).startOf("day"), b = this.diff(a, "days", !0), c = -6 > b ? "sameElse" : -1 > b ? "lastWeek" : 0 > b ? "lastDay" : 1 > b ? "sameDay" : 2 > b ? "nextDay" : 7 > b ? "nextWeek" : "sameElse"; return this.format(this.lang().calendar(c, this)) }, isLeapYear: function () { return x(this.year()) }, isDST: function () { return this.zone() < this.clone().month(0).zone() || this.zone() < this.clone().month(5).zone() }, day: function (a) { var b = this._isUTC ? this._d.getUTCDay() : this._d.getDay(); return null != a ? (a = X(a, this.lang()), this.add({ d: a - b })) : b }, month: eb("Month", !0), startOf: function (a) { switch (a = q(a)) { case "year": this.month(0); case "quarter": case "month": this.date(1); case "week": case "isoWeek": case "day": this.hours(0); case "hour": this.minutes(0); case "minute": this.seconds(0); case "second": this.milliseconds(0) }return "week" === a ? this.weekday(0) : "isoWeek" === a && this.isoWeekday(1), "quarter" === a && this.month(3 * Math.floor(this.month() / 3)), this }, endOf: function (a) { return a = q(a), this.startOf(a).add("isoWeek" === a ? "week" : a, 1).subtract("ms", 1) }, isAfter: function (a, b) { return b = "undefined" != typeof b ? b : "millisecond", +this.clone().startOf(b) > +ib(a).startOf(b) }, isBefore: function (a, b) { return b = "undefined" != typeof b ? b : "millisecond", +this.clone().startOf(b) < +ib(a).startOf(b) }, isSame: function (a, b) { return b = b || "ms", +this.clone().startOf(b) === +B(a, this).startOf(b) }, min: function (a) { return a = ib.apply(null, arguments), this > a ? this : a }, max: function (a) { return a = ib.apply(null, arguments), a > this ? this : a }, zone: function (a, b) { var c = this._offset || 0; return null == a ? this._isUTC ? c : this._d.getTimezoneOffset() : ("string" == typeof a && (a = K(a)), Math.abs(a) < 16 && (a = 60 * a), this._offset = a, this._isUTC = !0, c !== a && (!b || this._changeInProgress ? m(this, ib.duration(c - a, "m"), 1, !1) : this._changeInProgress || (this._changeInProgress = !0, ib.updateOffset(this, !0), this._changeInProgress = null)), this) }, zoneAbbr: function () { return this._isUTC ? "UTC" : "" }, zoneName: function () { return this._isUTC ? "Coordinated Universal Time" : "" }, parseZone: function () { return this._tzm ? this.zone(this._tzm) : "string" == typeof this._i && this.zone(this._i), this }, hasAlignedHourOffset: function (a) { return a = a ? ib(a).zone() : 0, (this.zone() - a) % 60 === 0 }, daysInMonth: function () { return u(this.year(), this.month()) }, dayOfYear: function (a) { var b = nb((ib(this).startOf("day") - ib(this).startOf("year")) / 864e5) + 1; return null == a ? b : this.add("d", a - b) }, quarter: function (a) { return null == a ? Math.ceil((this.month() + 1) / 3) : this.month(3 * (a - 1) + this.month() % 3) }, weekYear: function (a) { var b = $(this, this.lang()._week.dow, this.lang()._week.doy).year; return null == a ? b : this.add("y", a - b) }, isoWeekYear: function (a) { var b = $(this, 1, 4).year; return null == a ? b : this.add("y", a - b) }, week: function (a) { var b = this.lang().week(this); return null == a ? b : this.add("d", 7 * (a - b)) }, isoWeek: function (a) { var b = $(this, 1, 4).week; return null == a ? b : this.add("d", 7 * (a - b)) }, weekday: function (a) { var b = (this.day() + 7 - this.lang()._week.dow) % 7; return null == a ? b : this.add("d", a - b) }, isoWeekday: function (a) { return null == a ? this.day() || 7 : this.day(this.day() % 7 ? a : a - 7) }, isoWeeksInYear: function () { return v(this.year(), 1, 4) }, weeksInYear: function () { var a = this._lang._week; return v(this.year(), a.dow, a.doy) }, get: function (a) { return a = q(a), this[a]() }, set: function (a, b) { return a = q(a), "function" == typeof this[a] && this[a](b), this }, lang: function (b) { return b === a ? this._lang : (this._lang = E(b), this) } }), ib.fn.millisecond = ib.fn.milliseconds = eb("Milliseconds", !1), ib.fn.second = ib.fn.seconds = eb("Seconds", !1), ib.fn.minute = ib.fn.minutes = eb("Minutes", !1), ib.fn.hour = ib.fn.hours = eb("Hours", !0), ib.fn.date = eb("Date", !0), ib.fn.dates = c("dates accessor is deprecated. Use date instead.", eb("Date", !0)), ib.fn.year = eb("FullYear", !0), ib.fn.years = c("years accessor is deprecated. Use year instead.", eb("FullYear", !0)), ib.fn.days = ib.fn.day, ib.fn.months = ib.fn.month, ib.fn.weeks = ib.fn.week, ib.fn.isoWeeks = ib.fn.isoWeek, ib.fn.quarters = ib.fn.quarter, ib.fn.toJSON = ib.fn.toISOString, i(ib.duration.fn = h.prototype, { _bubble: function () { var a, b, c, d, e = this._milliseconds, f = this._days, g = this._months, h = this._data; h.milliseconds = e % 1e3, a = k(e / 1e3), h.seconds = a % 60, b = k(a / 60), h.minutes = b % 60, c = k(b / 60), h.hours = c % 24, f += k(c / 24), h.days = f % 30, g += k(f / 30), h.months = g % 12, d = k(g / 12), h.years = d }, weeks: function () { return k(this.days() / 7) }, valueOf: function () { return this._milliseconds + 864e5 * this._days + this._months % 12 * 2592e6 + 31536e6 * t(this._months / 12) }, humanize: function (a) { var b = +this, c = Z(b, !a, this.lang()); return a && (c = this.lang().pastFuture(b, c)), this.lang().postformat(c) }, add: function (a, b) { var c = ib.duration(a, b); return this._milliseconds += c._milliseconds, this._days += c._days, this._months += c._months, this._bubble(), this }, subtract: function (a, b) { var c = ib.duration(a, b); return this._milliseconds -= c._milliseconds, this._days -= c._days, this._months -= c._months, this._bubble(), this }, get: function (a) { return a = q(a), this[a.toLowerCase() + "s"]() }, as: function (a) { return a = q(a), this["as" + a.charAt(0).toUpperCase() + a.slice(1) + "s"]() }, lang: ib.fn.lang, toIsoString: function () { var a = Math.abs(this.years()), b = Math.abs(this.months()), c = Math.abs(this.days()), d = Math.abs(this.hours()), e = Math.abs(this.minutes()), f = Math.abs(this.seconds() + this.milliseconds() / 1e3); return this.asSeconds() ? (this.asSeconds() < 0 ? "-" : "") + "P" + (a ? a + "Y" : "") + (b ? b + "M" : "") + (c ? c + "D" : "") + (d || e || f ? "T" : "") + (d ? d + "H" : "") + (e ? e + "M" : "") + (f ? f + "S" : "") : "P0D" } }); for (kb in Yb) Yb.hasOwnProperty(kb) && (gb(kb, Yb[kb]), fb(kb.toLowerCase())); gb("Weeks", 6048e5), ib.duration.fn.asMonths = function () { return (+this - 31536e6 * this.years()) / 2592e6 + 12 * this.years() }, ib.lang("en", { ordinal: function (a) { var b = a % 10, c = 1 === t(a % 100 / 10) ? "th" : 1 === b ? "st" : 2 === b ? "nd" : 3 === b ? "rd" : "th"; return a + c } }), xb ? module.exports = ib : "function" == typeof define && define.amd ? (define("moment", function (a, b, c) { return c.config && c.config() && c.config().noGlobal === !0 && (mb.moment = jb), ib }), hb(!0)) : hb() }).call(this);
var data = "=";


//http://pieroxy.net/blog/pages/lz-string/index.html
//https://github.com/pieroxy/lz-string/
var LZString = function () { function o(o, r) { if (!t[o]) { t[o] = {}; for (var n = 0; n < o.length; n++) t[o][o.charAt(n)] = n } return t[o][r] } var r = String.fromCharCode, n = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=", e = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+-$", t = {}, i = { compressToBase64: function (o) { if (null == o) return ""; var r = i._compress(o, 6, function (o) { return n.charAt(o) }); switch (r.length % 4) { default: case 0: return r; case 1: return r + "==="; case 2: return r + "=="; case 3: return r + "=" } }, decompressFromBase64: function (r) { return null == r ? "" : "" == r ? null : i._decompress(r.length, 32, function (e) { return o(n, r.charAt(e)) }) }, compressToUTF16: function (o) { return null == o ? "" : i._compress(o, 15, function (o) { return r(o + 32) }) + " " }, decompressFromUTF16: function (o) { return null == o ? "" : "" == o ? null : i._decompress(o.length, 16384, function (r) { return o.charCodeAt(r) - 32 }) }, compressToUint8Array: function (o) { for (var r = i.compress(o), n = new Uint8Array(2 * r.length), e = 0, t = r.length; t > e; e++) { var s = r.charCodeAt(e); n[2 * e] = s >>> 8, n[2 * e + 1] = s % 256 } return n }, decompressFromUint8Array: function (o) { if (null === o || void 0 === o) return i.decompress(o); for (var n = new Array(o.length / 2), e = 0, t = n.length; t > e; e++) n[e] = 256 * o[2 * e] + o[2 * e + 1]; var s = []; return n.forEach(function (o) { s.push(r(o)) }), i.decompress(s.join("")) }, compressToEncodedURIComponent: function (o) { return null == o ? "" : i._compress(o, 6, function (o) { return e.charAt(o) }) }, decompressFromEncodedURIComponent: function (r) { return null == r ? "" : "" == r ? null : (r = r.replace(/ /g, "+"), i._decompress(r.length, 32, function (n) { return o(e, r.charAt(n)) })) }, compress: function (o) { return i._compress(o, 16, function (o) { return r(o) }) }, _compress: function (o, r, n) { if (null == o) return ""; var e, t, i, s = {}, p = {}, u = "", c = "", a = "", l = 2, f = 3, h = 2, d = [], m = 0, v = 0; for (i = 0; i < o.length; i += 1) if (u = o.charAt(i), Object.prototype.hasOwnProperty.call(s, u) || (s[u] = f++ , p[u] = !0), c = a + u, Object.prototype.hasOwnProperty.call(s, c)) a = c; else { if (Object.prototype.hasOwnProperty.call(p, a)) { if (a.charCodeAt(0) < 256) { for (e = 0; h > e; e++) m <<= 1, v == r - 1 ? (v = 0, d.push(n(m)), m = 0) : v++; for (t = a.charCodeAt(0), e = 0; 8 > e; e++) m = m << 1 | 1 & t, v == r - 1 ? (v = 0, d.push(n(m)), m = 0) : v++ , t >>= 1 } else { for (t = 1, e = 0; h > e; e++) m = m << 1 | t, v == r - 1 ? (v = 0, d.push(n(m)), m = 0) : v++ , t = 0; for (t = a.charCodeAt(0), e = 0; 16 > e; e++) m = m << 1 | 1 & t, v == r - 1 ? (v = 0, d.push(n(m)), m = 0) : v++ , t >>= 1 } l-- , 0 == l && (l = Math.pow(2, h), h++), delete p[a] } else for (t = s[a], e = 0; h > e; e++) m = m << 1 | 1 & t, v == r - 1 ? (v = 0, d.push(n(m)), m = 0) : v++ , t >>= 1; l-- , 0 == l && (l = Math.pow(2, h), h++), s[c] = f++ , a = String(u) } if ("" !== a) { if (Object.prototype.hasOwnProperty.call(p, a)) { if (a.charCodeAt(0) < 256) { for (e = 0; h > e; e++) m <<= 1, v == r - 1 ? (v = 0, d.push(n(m)), m = 0) : v++; for (t = a.charCodeAt(0), e = 0; 8 > e; e++) m = m << 1 | 1 & t, v == r - 1 ? (v = 0, d.push(n(m)), m = 0) : v++ , t >>= 1 } else { for (t = 1, e = 0; h > e; e++) m = m << 1 | t, v == r - 1 ? (v = 0, d.push(n(m)), m = 0) : v++ , t = 0; for (t = a.charCodeAt(0), e = 0; 16 > e; e++) m = m << 1 | 1 & t, v == r - 1 ? (v = 0, d.push(n(m)), m = 0) : v++ , t >>= 1 } l-- , 0 == l && (l = Math.pow(2, h), h++), delete p[a] } else for (t = s[a], e = 0; h > e; e++) m = m << 1 | 1 & t, v == r - 1 ? (v = 0, d.push(n(m)), m = 0) : v++ , t >>= 1; l-- , 0 == l && (l = Math.pow(2, h), h++) } for (t = 2, e = 0; h > e; e++) m = m << 1 | 1 & t, v == r - 1 ? (v = 0, d.push(n(m)), m = 0) : v++ , t >>= 1; for (; ;) { if (m <<= 1, v == r - 1) { d.push(n(m)); break } v++ } return d.join("") }, decompress: function (o) { return null == o ? "" : "" == o ? null : i._decompress(o.length, 32768, function (r) { return o.charCodeAt(r) }) }, _decompress: function (o, n, e) { var t, i, s, p, u, c, a, l, f = [], h = 4, d = 4, m = 3, v = "", w = [], A = { val: e(0), position: n, index: 1 }; for (i = 0; 3 > i; i += 1) f[i] = i; for (p = 0, c = Math.pow(2, 2), a = 1; a != c;) u = A.val & A.position, A.position >>= 1, 0 == A.position && (A.position = n, A.val = e(A.index++)), p |= (u > 0 ? 1 : 0) * a, a <<= 1; switch (t = p) { case 0: for (p = 0, c = Math.pow(2, 8), a = 1; a != c;) u = A.val & A.position, A.position >>= 1, 0 == A.position && (A.position = n, A.val = e(A.index++)), p |= (u > 0 ? 1 : 0) * a, a <<= 1; l = r(p); break; case 1: for (p = 0, c = Math.pow(2, 16), a = 1; a != c;) u = A.val & A.position, A.position >>= 1, 0 == A.position && (A.position = n, A.val = e(A.index++)), p |= (u > 0 ? 1 : 0) * a, a <<= 1; l = r(p); break; case 2: return "" } for (f[3] = l, s = l, w.push(l); ;) { if (A.index > o) return ""; for (p = 0, c = Math.pow(2, m), a = 1; a != c;) u = A.val & A.position, A.position >>= 1, 0 == A.position && (A.position = n, A.val = e(A.index++)), p |= (u > 0 ? 1 : 0) * a, a <<= 1; switch (l = p) { case 0: for (p = 0, c = Math.pow(2, 8), a = 1; a != c;) u = A.val & A.position, A.position >>= 1, 0 == A.position && (A.position = n, A.val = e(A.index++)), p |= (u > 0 ? 1 : 0) * a, a <<= 1; f[d++] = r(p), l = d - 1, h--; break; case 1: for (p = 0, c = Math.pow(2, 16), a = 1; a != c;) u = A.val & A.position, A.position >>= 1, 0 == A.position && (A.position = n, A.val = e(A.index++)), p |= (u > 0 ? 1 : 0) * a, a <<= 1; f[d++] = r(p), l = d - 1, h--; break; case 2: return w.join("") } if (0 == h && (h = Math.pow(2, m), m++), f[l]) v = f[l]; else { if (l !== d) return null; v = s + s.charAt(0) } w.push(v), f[d++] = s + v.charAt(0), h-- , s = v, 0 == h && (h = Math.pow(2, m), m++) } } }; return i }(); "function" == typeof define && define.amd ? define(function () { return LZString }) : "undefined" != typeof module && null != module && (module.exports = LZString);
console.warn = console.trace.bind(console);
(function () {
    var self = this;

    self.component = 'pace-calculator';
    self.ensureLibraries = function () {
        self.require(typeof jQuery == 'undefined', "https://ajax.googleapis.com/ajax/libs/jquery/2.2.2/jquery.min.js");
    };
    self.require = function (obj, url) {
        if (obj) {
            var oScriptElem = document.createElement("script");
            oScriptElem.type = "text/javascript";
            oScriptElem.src = url;
            document.head.insertBefore(oScriptElem, document.head.getElementsByTagName("script")[0]);
        }
    };
    self.requireStyle = function (css) {
        var head = document.head || document.getElementsByTagName('head')[0],
            style = document.createElement('style');

        style.type = 'text/css';
        if (style.styleSheet) {
            style.styleSheet.cssText = css;
        } else {
            style.appendChild(document.createTextNode(css));
        }

        head.appendChild(style);
    };
    self.defer = function (method) {
        if (window.jQuery) {
            method();
        }
        else {
            setTimeout(function () {
                self.defer(method)
            }, 50);
        }
    }
    self.init = function () {
        jQuery(document).ready(function () {
            self.ready();
        });
    };
    self.ensureLibraries();
    self.defer(self.init);
    self.ready = function () {
        //now we're cooking with gas, we have jQuery and we're in the context of the loader
        var anchor = jQuery('script[data-component=' + self.component + ']');
        var parent = anchor.closest('head').length;
        var html = self.build();
        var css = self.style();
        //self.requireStyle(css);
        //script included in <head>
        if (parent) {
            jQuery('body').append(html);
        } else {
            html.insertAfter(anchor);
        }
        self.attach();
    }

    self.getData = function () {
        var type = typeof data;
        var table = null;
        if (type === 'object') {
            table = data;
        } else {
            var jData = LZString.decompressFromBase64(data);
            table = JSON.parse(jData);
        }
        return table;
    };
    self.style = function () {
        var css = '';
        css += 'div.pace-calculator { width: 800px; }';
        css += 'div.pace-calculator input.bs-numeric { width:38px;float:left;padding:6px 6px 6px 6px; }';
        css += 'div.pace-calculator span.sep { float:left;display:block;height:34px;line-height:34px;vertical-align:middle;padding:0 2px;font-weight:bold; }';
        css += 'div.pace-calculator div.result-row { padding:5px;margin-top:10px; }';
        css += 'div.pace-calculator .input-validation-error { border:solid 1px #cc0000; }';
        css += 'div.pace-calculator legend { display: block; width: 100%; padding: 0; margin-bottom: 20px; font-size: 21px; line-height: inherit; color: #333; border: 0; border-bottom: 1px solid #e5e5e5; padding-bottom:2px; }  ';
        css += 'div.pace-calculator label { display: inline-block; margin-bottom: 5px; font-weight: 700; } ';
        css += 'div.pace-calculator .alert{ text-align:left; } ';
        css += 'div.pace-calculator { text-align:left; }';
        return css;
    };
    self.build = function () {
        //creates any html and returns it
        var container = jQuery('<div/>').attr('data-component', self.component).addClass(self.component);
        var html = '';
        html += '<div class="form-horizontal">'
        html += '<fieldset>';
        html += '<div class="form-group">';
        html += ' <label class="col-md-12 control-label" for="uxDistance">Choose distance</label>';
        html += ' <div class="col-md-4">';
        html += '     <select id="uxDistance" name="uxDistance" class="form-control" required="">';
        html += '         <option value="">Choose</option>';
        html += '         <option value="0">1 Mile</option>';
        html += '         <option value="1">3 KM</option>';
        html += '         <option value="2">5 KM</option>';
        html += '         <option value="3">10 KM</option>';
        html += '         <option value="4">Half-Marathon (21.2 KM)</option>';
        html += '         <option value="5">Full-Marathon (42.2 KM)</option>';
        html += '     </select>';
        html += ' </div>';
        html += '</div>';
        html += '<div class="form-group">';
        html += ' <label class="col-md-12 control-label" for="uxHours">Enter time</label>  ';
        html += ' <div class="col-md-12">';
        html += '     <input id="uxHours" name="uxHours" type="text" placeholder="hh" class="form-control bs-numeric" maxlength="2">';
        html += '     <span class="sep">:</span>'
        html += '     <input id="uxMinutes" name="uxMinutes" type="text" placeholder="mm" class="form-control bs-numeric" required="" maxlength="2">';
        html += '     <span class="sep">:</span>'
        html += '     <input id="uxSeconds" name="uxSeconds" type="text" placeholder="ss" class="form-control bs-numeric" required="" maxlength="2">';
        html += '     <br class="clearfix"/>';
        html += ' </div>';
        html += '</div>';
        html += '<div class="form-group">';
        html += ' <label class="col-md-12 control-label" for="uxCalculate"></label>';
        html += ' <div class="col-md-12">';
        html += '     <button id="uxCalculate" name="uxCalculate" class="btn btn-success">Calculate</button>';
        html += ' </div>';
        html += '</div>';
        html += '</fieldset>';
        html += '</div>';
        html += '<div class="results" style="display:none;">'
        html += '   <div class="alert alert-success"><i class="fa fa-thumbs-up"/>';
        html += '       <strong>Your results are in!</strong><br/>';
        html += '      Below you will find your personalized training paces.<br/>';
        html += '   </div>';
        html += '   <div class="row result-row"><div class="col-md-12"><div class="label label-primary">Race Projections</div></div></div>'
        var buildResultCell = function (label, index, labelClass) {
            var html = '';
            html += '       <label class="' + (labelClass || 'col-sm-2') + ' control-label">' + label + '</label>';
            html += '       <div class="col-sm-2">';
            html += '           <em class="uxResult" data-index="' + index + '"></em>';
            html += '       </div>';
            return html;
        };
        html += '   <div class="row">'
        html += buildResultCell('1 Mile', 0);
        html += buildResultCell('3 KM', 1);
        html += buildResultCell('5 KM', 2);
        html += '   </div>'
        html += '   <div class="row">'
        html += buildResultCell('10 KM', 3);
        html += buildResultCell('Half', 4);
        html += buildResultCell('Full', 5);
        html += '   </div>'
        html += '   <div class="row result-row"><div class="col-md-12"><div class="label label-primary">Training Paces</div></div></div>'
        html += '   <div class="row">'
        html += buildResultCell('Lactate Threshold (min/km)', 6, 'col-md-4');
        html += buildResultCell('V02Max (min/km)', 7, 'col-md-4');
        html += '   </div>'
        html += '   <div class="row">'
        html += buildResultCell('Repetition pace (/400m)', 8, 'col-md-4');
        html += buildResultCell('Repetition pace (/200m)', 9, 'col-md-4');
        html += '   </div>'
        html += '   <div class="row">'
        html += buildResultCell('Easy Pace Min (min/km)', 10, 'col-md-4');
        html += buildResultCell('Easy Pace Max (min/km)', 11, 'col-md-4');
        html += '   </div>'
        html += '</div>';
        container.append(html);
        return container;
    };
    self.date = moment(new Date()).format('YYYY-MM-DD');
    self.parseTime = function (value) {
        var parts = value.split(':');
        if (parts.length == 2) parts = ['0', parts[0], parts[1]];
        for (var c = 0; c < 3; c++)
            parts[c] = ('0' + parts[c]).substr('0' + parts[c].length - 1);
        return moment(self.date + 'T' + parts.join(':'));
    },
        self.attach = function () {
            //attaches any event handlers
            var context = jQuery('div[data-component=' + self.component + ']');
            var numeric = window.inputTypeNumberPolyfill.polyfillElement;
            jQuery('.bs-numeric').each(function (index, element) { numeric(element); });

            context.on('click', '#uxCalculate', function () {
                //remove all red borders
                jQuery('.input-validation-error').removeClass('input-validation-error');
                var uxDistance = jQuery('#uxDistance');
                var distance = parseFloat(uxDistance.val());
                //validate required fields
                if (!distance) uxDistance.addClass('input-validation-error');

                var uxHours = jQuery('#uxHours');
                var hours = parseFloat(uxHours.val());
                var uxMins = jQuery('#uxMinutes');
                var mins = parseFloat(uxMins.val());
                var uxSecs = jQuery('#uxSeconds');
                var secs = parseFloat(uxSecs.val());

                if (!uxMins.val()) uxMins.addClass('input-validation-error');
                if (!uxSecs.val()) uxSecs.addClass('input-validation-error');

                if (hours < 0 || hours > 5) uxHours.addClass('input-validation-error');
                if (mins < 0 || mins > 59) uxMins.addClass('input-validation-error');
                if (secs < 0 || secs > 59) uxSecs.addClass('input-validation-error');

                //validate entered time is valid
                var epoch = moment(new Date()).startOf('day');
                epoch.add(hours, 'hours');
                epoch.add(mins, 'minutes');
                epoch.add(secs, 'seconds');

                if (!epoch.isValid()) {
                    uxHours.addClass('input-validation-error');
                    uxMins.addClass('input-validation-error');
                    uxSecs.addClass('input-validation-error');
                }

                //if good
                if (jQuery('.input-validation-error').length == 0) {
                    //get data
                    var data = self.getData();
                    //perform lookup (using closest match in column)
                    var rowIndex = 0;
                    var rowCount = data.length;
                    var d = 1000000;
                    var minRow = 0;
                    for (rowIndex = 0; rowIndex < rowCount; rowIndex++) {
                        var row = data[rowIndex];
                        var cell = self.parseTime(row[distance]);
                        var diff = Math.abs(cell.diff(epoch));
                        if (diff < d) {
                            d = diff;
                            minRow = rowIndex;
                        }
                    }
                    var row = data[minRow];

                    //fill results grid
                    for (var index = 0; index < row.length; index++) {
                        var cell = self.parseTime(row[index]);
                        var h = parseFloat(cell.format('H'));
                        var text = (h == 0) ? cell.format('m:ss') : cell.format('H:mm:ss')
                        jQuery('.uxResult[data-index=' + index + ']').text(text);
                    }
                    //show results panel
                    jQuery('div.results').show();
                }
            });
        }
})();